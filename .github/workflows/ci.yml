name: CI

on:
  push:
    branches: [ master,add-c-exports ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUSTDOCFLAGS: "--deny warnings"
  RUSTFLAGS: "--deny warnings"
      
jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["windows-latest"]
        target: ["x86_64-pc-windows-msvc", "i686-pc-windows-msvc"]
    steps:
    - uses: actions/checkout@v4
  
    - name: Install Nightly Rust
      uses: dtolnay/rust-toolchain@nightly
      with:
        targets: ${{ matrix.target }}

    # We need this because we also text x64-to-x86 injection.
    - name: Add i686 Rust Target
      run: rustup target add i686-pc-windows-msvc --toolchain nightly

    - name: Can Build
      run: cargo build --target ${{ matrix.target }}
      
    - name: Can Build test target
      run: cargo build --target ${{ matrix.target }} --manifest-path "tests/helpers/test_target/Cargo.toml"
    - name: Can Build test payload
      run: cargo build --target ${{ matrix.target }} --manifest-path "tests/helpers/test_payload/Cargo.toml"
      
    - name: Test
      run: cargo test --target ${{ matrix.target }} --all-features -- --nocapture
      
    - name: Can Build (no features)
      run: cargo build --target ${{ matrix.target }} --no-default-features
    - name: Can Build (feature syringe)
      run: cargo build --target ${{ matrix.target }} --no-default-features --features syringe
    - name: Can Build (feature rpc)
      run: cargo build --target ${{ matrix.target }} --no-default-features --features rpc

  test-on-wine:
    runs-on: ubuntu-latest
  
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
  
      # Install Rust nightly toolchain
      - name: Install Nightly Rust
        uses: dtolnay/rust-toolchain@nightly
  
      # Add Windows MSVC targets
      - name: Add Rust targets
        run: |
          rustup target add x86_64-pc-windows-msvc --toolchain nightly
          rustup target add i686-pc-windows-msvc --toolchain nightly
  
      # Install cargo-xwin
      - name: Install cargo-xwin
        run: cargo install cargo-xwin
  
      # We can't use 'cross' due to using xwin, so we have to manually install Wine
      - name: Install Wine
        run: |
          sudo apt-get install ppa-purge && sudo ppa-purge -y ppa:ubuntu-toolchain-r/test
          sudo dpkg --add-architecture i386
          sudo mkdir -pm755 /etc/apt/keyrings && sudo wget -O /etc/apt/keyrings/winehq-archive.key https://dl.winehq.org/wine-builds/winehq.key
          sudo wget -NP /etc/apt/sources.list.d/ https://dl.winehq.org/wine-builds/ubuntu/dists/jammy/winehq-jammy.sources
          sudo apt-get update
          sudo apt install --install-recommends winehq-stable

      # Run tests with Wine
      - name: Run tests on Wine
        run: ./scripts/test-wine.ps1
        shell: pwsh

  build-c-libs:
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            use_cross: false
          - os: windows-latest
            target: i686-pc-windows-msvc
            use_cross: false
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - id: build-libs
        uses: Reloaded-Project/reloaded-project-configurations-rust/.github/actions/build-c-library@v1 # upgrade if needed
        with:
          target: ${{ matrix.target }}
          use_pgo: false
          use_cross: ${{ matrix.use_cross }}
          features: "c-exports"

  build-c-headers:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Generate C++ bindings
        uses: Reloaded-Project/reloaded-project-configurations-rust/.github/actions/generate-bindings@v1
        with:
          config_file: cbindgen_cpp.toml
          header_file: bindings_cpp.hpp
  
      - name: Generate C bindings
        uses: Reloaded-Project/reloaded-project-configurations-rust/.github/actions/generate-bindings@v1
        with:
          config_file: cbindgen_c.toml
          header_file: bindings_c.h

  build-dotnet-library:
    needs: build-c-libs
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build and Package .NET Library
        uses: Reloaded-Project/reloaded-project-configurations-rust/.github/actions/build-dotnet-library@dotnet-bindings
        with:
          targets: 'x86_64-pc-windows-msvc,i686-pc-windows-msvc'

  documentation:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["windows-latest"]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Nightly Rust
      uses: dtolnay/rust-toolchain@nightly

    # Add Windows MSVC targets
    - name: Add Rust targets
      run: |
        rustup target add x86_64-pc-windows-msvc --toolchain nightly
        rustup target add i686-pc-windows-msvc --toolchain nightly
      
    - name: Generate documentation
      run: cargo +nightly doc --all-features
    - name: Install cargo-deadlinks
      run: cargo +nightly install cargo-deadlinks
    - name: Check dead links in doc
      run: cargo +nightly deadlinks

  clippy:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["windows-latest"]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Nightly Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy

      - uses: giraffate/clippy-action@v1
        with:
          reporter: 'github-pr-review'
          github_token: ${{ secrets.GITHUB_TOKEN }}
  
  publish-crate:
    permissions:
      contents: write

    needs: [test,build-c-libs,build-c-headers,test-on-wine,build-dotnet-library]
    # Publish only on tags
    if: startsWith(github.ref, 'refs/tags/') 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: ↙️ Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Upload to NuGet
        shell: pwsh
        run: |
          $items = Get-ChildItem -Path "artifacts/**.nupkg" -Recurse
          Foreach ($item in $items)
          {
              Write-Host "Pushing $item"
              dotnet nuget push "$item" -k "${{ secrets.NUGET_KEY }}" -s "https://api.nuget.org/v3/index.json" --skip-duplicate
          }

          $items = Get-ChildItem -Path "artifacts/**.snupkg" -Recurse
          Foreach ($item in $items)
          {
              Write-Host "Pushing Symbol Package $item"
              dotnet nuget push "$item" -k "${{ secrets.NUGET_KEY }}" -s "https://api.nuget.org/v3/index.json" --skip-duplicate
          }

      - name: Compress Artifacts
        shell: bash
        run: |
          dir="artifacts"
          if [ ! -d "$dir" ]; then
            echo "Directory $dir does not exist. No artifacts found."
            exit 0
          fi

          for subdir in "$dir"/*; do
            if [ -d "$subdir" ]; then
              base=$(basename "$subdir")
              zip -r "$dir/$base.zip" "$subdir"
              rm -r "$subdir"
            fi
          done
          ls -A ./artifacts

      - name: GitHub Release Artifacts
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/*


      - name: Publish to crates.io
        uses: Reloaded-Project/reloaded-project-configurations-rust/.github/actions/publish-crate@v1
        with:
          token: ${{ secrets.CRATES_IO_TOKEN }}
